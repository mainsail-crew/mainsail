# configuration file for git-cliff (0.1.0)

[changelog]
# changelog header
header = """
<!-- THIS FILE IS UPDATED AUTOMATICALLY, ANY CHANGES WILL BE OVERRIDDEN -->
# Changelog
All notable changes to Mainsail will be documented in this file.\n
"""
# template for the changelog body
# https://tera.netlify.app/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}](https://github.com/mainsail-crew/mainsail/releases/tag/{{version}}) - {{ timestamp | date(format="%Y-%m-%d") }}    
\
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}\
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        - **{{commit.scope}}**: {{ commit.message | upper_first | trim }}\
        {%- if commit.breaking %}
        {% raw %}  {% endraw %}- **BREAKING**: {{commit.breaking_description}}
        {%- endif -%}
    {%- endfor -%}
    {%- for commit in commits %}
        {%- if commit.scope -%}
        {% else -%}
        {% raw %}\n{% endraw %}\
        - {{ commit.message | upper_first | trim }}\
        {%- if commit.breaking %}
        {% raw %}  {% endraw %}- **BREAKING**: {{commit.breaking_description}}
        {%- endif -%}
        {% endif -%}
    {% endfor -%}
    {% raw %}\n{% endraw %}
{% endfor %}\n\
"""
# remove the leading and trailing whitespaces from the template
trim = true
# changelog footer
footer = """
"""

# postprocessors
postprocessors = [
    { pattern = '<REPO>', replace = "https://github.com/mainsail-crew/mainsail" }, # replace repository URL
]

[git]
# allow only conventional commits
# https://www.conventionalcommits.org
conventional_commits = true
filter_unconventional = false
# regex for parsing and grouping commits
commit_parsers = [

    # Commits to skip
    { message = "^docs\\(changelog\\):", group = "Changelog", skip = true}, # Old redundant commits
    { message = "^chore: push version number to", group = "9$Other", skip = true}, # Old redundant commits
    { message = "^chore\\(changelog\\): update changelog", group = "Changelog", skip = true}, # Old redundant commits

    # Commits to parse
    { message = "^feat(\\(.*\\))?:", group = "<!-- 1 -->Features"},
    { message = "^feature(\\(.*\\))?:", group = "<!-- 1 -->Features"},
    { message = "^fix(\\(.*\\))?:", group = "<!-- 2 -->Bug Fixes and Improvements"},
    { message = "^perf(\\(.*\\))?:", group = "<!-- 3 -->Performance"},
    { message = "^refactor(\\(.*\\))?:", group = "<!-- 4 -->Refactor"},
    { message = "^style(\\(.*\\))?:", group = "<!-- 5 -->Styling"},
    { message = "^locale(\\(.*\\))?:", group = "<!-- 6 -->Localization"},
    { message = "^docs(\\(.*\\))?:", group = "<!-- 7 -->Documentation"},
    { message = "^test(\\(.*\\))?:", group = "<!-- 8 -->Other"},
    { message = "^chore(\\(.*\\))?:", group = "<!-- 8 -->Other"},

    { message = "release v2.1.2", group = "Release"}, # workaround for v2.1.2 release

    { body = ".*security", group = "Security"},
]
commit_preprocessors = [
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/pull/${2}))" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = true
ignore_tags="v*-(beta|rc)*"
# glob pattern for matching git tags
tag_pattern = "v[0-9]*"